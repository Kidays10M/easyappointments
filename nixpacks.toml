# nixpacks.toml

[phases.setup]
# Define the exact Nix packages to install.
nixPkgs = [
    "php81", 
    "php81Packages.composer",
    "nodejs-18_x",
    "php81Extensions.gd",
    "php81Extensions.intl",
    "php81Extensions.curl",
    "php81Extensions.mysqli"
]

[phases.build]
# Build the application assets.
cmds = [
    "composer install --no-dev --optimize-autoloader",
    "npm install",
    "npm run build"
]

# THE [start] SECTION HAS BEEN REMOVED.

[webServer]
# This section will now correctly handle starting PHP-FPM and Nginx.
command = "nginx"
config = """
server {
    listen 80;
    server_name localhost;
    root /app;
    index index.php;

    # Add headers to serve security related headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval';" always;
    
    # Prevent access to dot-files, which we don't need anyway
    location ~ /\\. {
        deny all;
    }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    location ~ \\.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\\.php)(/.+)$;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}
"""